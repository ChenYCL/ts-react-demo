{"version":3,"sources":["utils/isDev.ts","config/proxy.ts","pages/Songs/requests.ts","config/history.ts","components/Loading/PageLoading/index.tsx","pages/Songs/reducer.ts","pages/Login/reducer.ts","store/rootReducer.ts","pages/TestPage/reducer.ts","pages/TestPage/constants.ts","pages/Songs/constants.ts","pages/Login/constants.ts","pages/TestPage/actions.ts","pages/TestPage/saga.ts","api/index.ts","pages/Songs/actions.ts","pages/Songs/saga.ts","sagas/index.ts","store/configureStore.prod.ts","store/configureStore.dev.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["isDev","process","BASE_NAME","apiHost","getMusicCat","a","async","$http","url","method","then","res","data","createBrowserHistory","createHashHistory","PageLoading","songsCat","category","categories","sub","all","initialState","Authorized","rootReducer","combineReducers","countReducer","state","action","type","Songs","Object","assign","LoginReducer","_","addHandler","autoAdd","watchReduce","countSaga","delay","put","takeEvery","console","log","fork","SongRequest","getMusicCatList","GetMusicCatList","songSaga","call","req","rootSaga","sagaMiddleware","createSagaMiddleware","Home","lazy","Login","store","createStore","applyMiddleware","run","prodStore","App","basename","fallback","path","component","props","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d1d42fb.chunk.js","sourcesContent":["export const isDev = process.env.NODE_ENV === 'development';\n","import { isDev } from '../utils/isDev';\n\nexport const BASE_NAME = isDev ? '/' : '/';\n\nconst apiHost = isDev ? 'https://yo8.fun' : 'https://yo8.fun';\n\n/*\n *   歌曲列表\n *         http://localhost:9000/comment/music?id=186016&limit=1\n * */\nexport default apiHost;\n","// import { AxiosInstance as $http } from 'axios';\n\nimport apiHost from '../../config/proxy';\n\nexport default {\n    getMusicCat: async (): Promise<$AxiosResponse> => {\n        return $http({\n            url: `${apiHost}/playlist/catlist`,\n            method: 'post',\n        }).then((res: any) => {\n            return res.data;\n        });\n    },\n};\n","import { createBrowserHistory, createHashHistory } from 'history';\nimport { BASE_NAME } from './proxy';\nimport { isDev } from '../utils/isDev';\n\nexport const history = isDev ? createBrowserHistory : createHashHistory;\n\nexport default BASE_NAME;\n","import React from 'react';\n\nconst PageLoading = () => {\n    return <div>PageLoading loading</div>;\n};\n\nexport default PageLoading;\n","import { songAction } from './actions';\n// import { merge } from 'lodash';\n\nimport { GET_MUSIC_CAT } from './constants';\n\nexport interface SubType {\n    name: string;\n    resourceCount: number;\n    imgId: number;\n    imgUrl: string | null;\n    type: number;\n    category: number;\n    resourceType: number;\n    hot: boolean;\n    activity: boolean;\n}\n\nexport interface CatList {\n    all: any;\n    sub: SubType[];\n}\n\nexport type initialType = CatList | {};\n\nexport interface IRootState {\n    data: CatList;\n}\n\nexport const songsCat = {\n    category: {\n        categories: null,\n        sub: null,\n        all: null,\n    },\n}; // 歌曲分类 初始值\n\nexport const Songs = (state: initialType = songsCat, action: songAction): initialType => {\n    switch (action.type) {\n        case GET_MUSIC_CAT:\n            return Object.assign({}, { category: { ...action.data } });\n        default:\n            return state;\n    }\n};\n","import { LOGINOUT, LOGIN } from './constants';\nimport { LOGIN_ACTIONS } from './actions';\nimport * as _ from 'lodash';\n\ntype AuthType = boolean;\n\nexport interface stateType {\n    Authorized: AuthType;\n}\nlet initialState: stateType = {\n    Authorized: true,\n};\n\nexport const LoginReducer = (state = initialState, action: LOGIN_ACTIONS): stateType => {\n    switch (action.type) {\n        case LOGIN:\n            return _.merge(state, { Authorized: true });\n        case LOGINOUT:\n            return _.merge(state, { Authorized: false });\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport { countReducer } from '../pages/TestPage/reducer';\nimport { Songs } from '../pages/Songs/reducer';\nimport { LoginReducer } from '../pages/Login/reducer';\n\nconst rootReducer = combineReducers({\n    countReducer,\n    Songs,\n    LoginReducer,\n});\nexport default rootReducer;\n\n// gloabl\n","import { countAction } from './actions';\n\nimport { ADD, REDUCE } from './constants';\n\nexport type countType = number;\nexport const iniValue = 1;\n\nexport interface IRootState {\n    count: countType;\n}\n\nexport const countReducer = (state: countType = iniValue, action: countAction): countType => {\n    switch (action.type) {\n        case ADD:\n            return state + 1;\n        case REDUCE:\n            return state - 1;\n        default:\n            return state;\n    }\n};\n","// only define action constant\nconst ADD = 'ADD';\nconst REDUCE = 'REDUCE';\n\nexport { ADD, REDUCE };\n","export const GET_MUSIC_CAT = 'GET_MUSIC_CAT';\n","export const LOGIN = 'LOGIN';\n\nexport const LOGINOUT = 'LOGINOUT';\n","import { Action } from 'redux';\n\nimport { ADD, REDUCE } from './constants';\n\nexport interface ADD_ACTION_TYPE extends Action {\n    type: typeof ADD;\n}\n\nexport interface REDUCE_ACTION_TYPE extends Action {\n    type: typeof REDUCE;\n}\n\n// export type\nexport type countAction = ADD_ACTION_TYPE | REDUCE_ACTION_TYPE;\n\n// add handler\nexport const addHandler = (): countAction => ({\n    type: ADD,\n});\n\n// reduce handler\nexport const reduceHandler = (): countAction => ({\n    type: REDUCE,\n});\n","import { put, takeEvery, fork, delay } from 'redux-saga/effects';\n\nimport { SagaIterator } from 'redux-saga';\n\nimport { addHandler } from './actions';\n\nfunction* autoAdd(): SagaIterator {\n    yield delay(5000);\n    yield put(addHandler()); // active add\n}\n\nexport function* watchReduce() {\n    yield takeEvery('REDUCE', () => console.log('now reduce 1'));\n}\n\nexport function* countSaga() {\n    // const [auto, watch] = yield all([call(autoAdd), call(watchReduce)]);\n    yield fork(autoAdd);\n    yield fork(watchReduce);\n}\n\n/*\n*  async\n*\n*   import {\n      put,\n      takeEvery,\n      call,\n    } from 'redux-saga/effects';\n    import { SagaIterator } from 'redux-saga';\n    import { GET_EMPLOYEE } from './constants';\n    import { getEmployeesSuccessAction } from './actions';\n    import { employeesRequests } from './requests';\n\n    function* getEmployeesSaga(): SagaIterator {\n      const employee = yield call(employeesRequests.list);\n      yield put(getEmployeesSuccessAction(employee));\n    }\n\n    export function* employeesActionSaga(): Generator {\n      yield takeEvery(GET_EMPLOYEE, getEmployeesSaga);\n    }\n*\n* */\n","import SongRequest from '../pages/Songs/requests';\n\nexport default {\n    SongRequest,\n};\n","import { Action } from 'redux';\nimport { initialType } from './reducer';\nimport { GET_MUSIC_CAT } from './constants';\n\nexport interface CAT_ACTION_TYPE extends Action {\n    type: typeof GET_MUSIC_CAT;\n    data?: object;\n}\n\nexport type songAction = CAT_ACTION_TYPE;\n\nexport const getMusicCatList = (data: initialType) => ({\n    type: GET_MUSIC_CAT,\n    data,\n});\n","import { put, call, fork } from 'redux-saga/effects';\nimport req from '../../api/index';\nimport { SagaIterator } from 'redux-saga';\n\nimport { getMusicCatList } from './actions';\n\nfunction* GetMusicCatList(): SagaIterator {\n    const { all, categories, sub } = yield call(req.SongRequest.getMusicCat);\n    const data = { all, categories, sub };\n    yield put(getMusicCatList(data));\n}\n\nexport function* songSaga() {\n    yield fork(GetMusicCatList);\n}\n","import { fork } from 'redux-saga/effects';\nimport { countSaga } from '../pages/TestPage/saga';\nimport { songSaga } from '../pages/Songs/saga';\n\nexport default function* rootSaga() {\n    yield fork(countSaga);\n    yield fork(songSaga);\n}\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from '../sagas/index';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(initialState?: any): Store {\n    const store = createStore(rootReducer, initialState, applyMiddleware(sagaMiddleware));\n    // 需要在创建Store以后通过run()方法调用rootSaga\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n}\n","import { createStore, applyMiddleware, Store, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport rootReducer from './rootReducer';\nimport rootSaga from '../sagas/index';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(initialState?: any): Store {\n    const store = createStore(\n        rootReducer,\n        initialState,\n        composeWithDevTools(applyMiddleware(sagaMiddleware, createLogger()))\n    );\n    // 需要在创建Store以后通过run()方法调用rootSaga\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n}\n","import React, { Suspense, lazy } from 'react';\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport BASE_NAME from './config/history';\nimport { PageLoading } from './components/Loading';\nimport './App.scss';\nimport { Provider } from 'react-redux';\nimport prodStore from './store/configureStore.prod'; // 生成环境\nimport devStore from './store/configureStore.dev'; // 开发环境\n\n// 主路由 home , login\nconst Home = lazy(() => import(/* webpackChunkName:\"Home\" */ './pages/Home'));\nconst Login = lazy(() => import(/* webpackChunkName:\"Login\" */ './pages/Login'));\n\nconst store = process.env.NODE_ENV === 'production' ? prodStore() : devStore();\n\nconst App: React.FC = () => {\n    return (\n        <Provider store={store}>\n            <Router basename={BASE_NAME}>\n                <Suspense fallback={<PageLoading />}>\n                    <Switch>\n                        <Route path=\"/home\" component={(props: any) => <Home {...props} />} />\n                        <Route path=\"/login\" exact component={(props: any) => <Login {...props} />} />\n                        {/*  有权限跳转,不满足则/login */}\n                        <Redirect to=\"/home\" />\n                    </Switch>\n                </Suspense>\n            </Router>\n        </Provider>\n    );\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}